CSS Grid also includes a shorthand property for defining rows and columns. In our previous example we can replace the properties for grid-template-rows and grid-template-columns with the shorthand grid-template property.

.container {
  display: grid;
  grid-template: 50px 50px / 50px 50px 50px;
  OR 
  grid-template-rows: 50px 50px; 
  grid-template-columns: 50px 50px 50px; 
}

When we use the grid-template-columns and grid-template-rows properties, we are explicitly defining grid tracks to lay out our grid items. But when the grid needs more tracks for extra content, it will implicitly define new grid tracks. Additionally, the size values established from our grid-template-columns or grid-template-rows properties are NOT carried over into these implicit grid tracks. But we can define values for the implicit grid tracks.
We can set the implicit grid track sizes using the grid-auto-rows and grid-auto-columns properties.
By default, CSS Grid will add additional content with implicit rows. Use the grid-auto-flow property to set the implicit grid flow direction. 


Whenever we create grid tracks, grid lines are created implicitly. Grid lines are what we use to position grid items.

<div class="container">
  <div class="room" id="living-room">Living Room</div>
  <div class="room" id="kitchen">Kitchen</div>
  <div class="room" id="bedroom">Bedroom</div>
  <div class="room" id="bathroom">Bathroom</div>
  <div class="room" id="closet">Closet</div>
</div>

OPTION 1: 
.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
}

.room {
  border: 1px solid;
  font-size: 50%;
  text-align: center;
}

#living-room {
  grid-column: 1 / 6;
  grid-row: 1 / 3;
}

#kitchen {
  grid-column: 4 / 6;
  grid-row: 3 / 6;
}

#bedroom {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 3;
  grid-row-end: 5;
}

#bathroom {
  grid-column-start: 1;
  grid-column-end: 2;
  grid-row-start: 3;
  grid-row-end: 6;
}

#closet {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 5;
  grid-row-end: 6;
}

OPTION 2: 
You can combine grid-row-start / grid-column-start / grid-row-end / grid-column-end into one line using grid-area.
#living-room {
    rowstart/columnstart/rowend/columnend
  grid-area: 1 / 1 / 3 / 6;
}

OPTION 3: 
.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
  grid-template-areas: ***
    "living-room living-room living-room living-room living-room"
    "living-room living-room living-room living-room living-room"
    "bedroom bedroom bathroom kitchen kitchen"
    "bedroom bedroom bathroom kitchen kitchen"
    "closet closet bathroom kitchen kitchen"    

    utilize . to have empty space
}

.room {
  border: 1px solid;
  font-size: 50%;
  text-align: center;
}

#living-room {
   grid-area:  living-room;
}

#kitchen {
  grid-area: kitchen;
}

#bedroom {
  grid-area: bedroom;
}

#bathroom {
  grid-area: bathroom;
}

#closet {
  grid-area: closet;
}

SUBGRIDS
In addition to regular grids, subgrid lets us create nested grids that use the track definition of the parent grid.
grid-template-columns: subgrid. The nested grid then use the parent grid tracks to lay out items.

.box1 {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 3;
  display: grid;
  grid-template-columns: subgrid;
}

STRETCHING THE WHOLE GRID
.item {
  grid-column: 1 / -1;
}

SPAN 
.box1 {
  grid-column: 1;
  grid-row: 1 / span 3; // 3 grids occupied
}
.box2 {
  grid-column: 3;
  grid-row: 1 / span 2;
}
______________________

.box1 {
  grid-column-start: 1;
  grid-row-start: span 3;
  grid-row-end: 4;
}

Remember that if you do not place all of the items, any leftover items will be placed according to auto-placement rules.

BOX ALIGNMENT
When working with grid layout you have two axes available to align things against – 
the block axis - VERTICAL
and the inline axis - HORIZONTAL
They bothh take a lot of the same values as flexbox. 

resize: both:  
This is a property that allows the user to resize the container by clicking and dragging from the bottom right corner. 

We use overflow: auto to enable scrolling if we resize the container to be smaller than our grid can accommodate.

REPEAT
repeat() is a CSS function available to the CSS Grid template properties that allows us to define a number of rows or columns and the size we want them to be without having to manually type out each individual track’s size.

FR UNIT
The fr unit is a way of distributing whatever remaining space is left in the grid. 
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(2, 2fr) repeat(3, 1fr); // 2fr 2fr 1fr 1fr 1fr 

  MIN & MAX
  .grid-container {
  grid-template-rows: repeat(2, min(200px, 50%));
  grid-template-columns: repeat(5, max(120px, 15%));
}

minmax() is a CSS function that is specifically used with Grid. It can ONLY be used with the following CSS properties:
grid-template-columns
grid-template-rows
grid-auto-columns
grid-auto-rows

CLAMP 
clamp() is a CSS function that can be used anywhere; 
clamp(minimum-size (typically static), ideal-size (dynamic), maximum-size(typically static))

.grid-container {
  grid-template-columns: repeat(5, clamp(150px, 20%, 200px));
}

Using clamp() and minmax() are fantastic methods for making grids more responsive while ensuring we don’t hit critical breakpoints that make our website look bad. 

AUTO-FIT and AUTO-FILL:
both of these functions will return “the largest possible positive integer” without the grid items overflowing their container.

AUTO-FIT
.example {
  display: grid;
  width: 1000px;
  grid-template-columns: repeat(auto-fit, 200px);
}
The real magic of auto-fit and auto-fill comes when we incorporate minmax() into the equation. 
So what’s going on here specifically with repeat(auto-fit, minmax(150px, 1fr));? Remember that auto-fit will return the highest positive integer without overflowing the grid. 
So first, the browser has to know how wide our grid is: in this case, it’s just the window’s width (minus margins) because we didn’t explicitly set it. 
For the sake of this example, let’s pretend like our window is currently 500px wide. Second, the browser needs to know how many grid column tracks could possibly fit in that width. 
To do this, it uses the minimum value in our minmax() function, since that will yield the highest number of items, which is 150px. If our window is 500px wide, this means our grid will render 3 columns. 
But wait, there’s more! Once the browser has determined how many columns we can fit, it then resizes our columns up to the maximum value allowed by our minmax() function. 
In this case, our max size is 1fr, so all three columns will be given an equal allotment of the space available. As we resize our window, these calculations happen in realtime and the result is what you see in the above example!

In most cases, auto-fill is going to work exactly the same way as auto-fit:
When the grid is expanded to a size where another grid item could fit, but there aren’t any left, auto-fit will keep the grid items at their max size. 
Using auto-fill, the grid items will snap back down to their min size once the space becomes available to add another grid item, even if there isn’t one to be rendered.

grid-template-columns: 
  repeat(auto-fit, minmax(250px, 1fr));

  .container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: masonry;
}

More specifically, our ability to specify how many columns we want in the grid and then letting the browser handle the responsiveness of those columns for us, 
showing fewer columns on smaller viewport sizes, and more columns as the screen estate allows for more, without needing to write a single media query to dictate this responsive behavior.

**** auto-fill FILLS the row with as many columns as it can fit. So it creates implicit columns whenever a new column can fit, because it’s trying to FILL the row with as many columns as it can. The newly added columns can and may be empty, but they will still occupy a designated space in the row.
**** auto-fit FITS the CURRENTLY AVAILABLE columns into the space by expanding them so that they take up any available space. The browser does that after FILLING that extra space with extra columns (as with auto-fill ) and then collapsing the empty ones.

grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );

Content first vs layout first design
A way to decide between Grid and Flexbox is to consider if your design starts from the content, or from the layout.

Smashingmagazine.com - use cases for flexbox ---> do NOT use flexbox as agrid system