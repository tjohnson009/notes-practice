# JSON #
JSON exists as a string whose format very much resembles JavaScript object literal format. — useful when you want to transmit data 
across a network. It needs to be converted to a native JavaScript object when you want to access the data.
JSON.isRawJSON() - Experimental
JSON.parse()
JSON.rawJSON() - Experimental
JSON.stringify()

parse(): Accepts a JSON string as a parameter, and returns the corresponding JavaScript object.
stringify(): Accepts an object as a parameter, and returns the equivalent JSON string.
A common use of JSON is to exchange data to/from a web server.
When sending data to a web server, the data has to be a string.
Convert a JavaScript object into a string with JSON.stringify()

The JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value.
This can be omitted if you convert your functions into strings before running the JSON.stringify() function.
const obj = {name: "John", age: function () {return 30;}, city: "New York"};
obj.age = obj.age.toString();
const myJSON = JSON.stringify(obj);

{
  "squadName": "Super hero squad",
  "homeTown": "Metro City",
  "formed": 2016,
  "secretBase": "Super tower",
  "active": true,
  "members": [
    {
      "name": "Molecule Man",
      "age": 29,
      "secretIdentity": "Dan Jukes",
      "powers": ["Radiation resistance", "Turning tiny", "Radiation blast"]
    },
    {
      "name": "Madame Uppercut",
      "age": 39,
      "secretIdentity": "Jane Wilson",
      "powers": [
        "Million tonne punch",
        "Damage resistance",
        "Superhuman reflexes"
      ]
    },
    {
      "name": "Eternal Flame",
      "age": 1000000,
      "secretIdentity": "Unknown",
      "powers": [
        "Immortality",
        "Heat Immunity",
        "Inferno",
        "Teleportation",
        "Interdimensional travel"
      ]
    }
  ]
}

Once parsed you can do this: superHeroes["members"][1]["powers"][2];

We can also convert arrays to/from JSON. Below is also valid JSON:
[
  {
    "name": "Molecule Man",
    "age": 29,
    "secretIdentity": "Dan Jukes",
    "powers": ["Radiation resistance", "Turning tiny", "Radiation blast"]
  },
  {
    "name": "Madame Uppercut",
    "age": 39,
    "secretIdentity": "Jane Wilson",
    "powers": [
      "Million tonne punch",
      "Damage resistance",
      "Superhuman reflexes"
    ]
  }
]

The above is perfectly valid JSON. You'd just have to access array items (in its parsed version) by starting with an array index,
 for example [0]["powers"][0].

JSON is purely a string with a specified data format — it contains only properties, no methods.
JSON requires double quotes to be used around strings and property names. Single quotes are not valid other than surrounding the 
entire JSON string.
Even a single misplaced comma or colon can cause a JSON file to go wrong, and not work. You should be careful to validate any data 
you are attempting to use (although computer-generated JSON is less likely to include errors, as long as the generator program is 
working correctly). You can validate JSON using an application like JSONLint.
JSON can actually take the form of any data type that is valid for inclusion inside JSON, not just arrays or objects. So for 
example, a single string or number would be valid JSON.
Unlike in JavaScript code in which object properties may be unquoted, in JSON only quoted strings may be used as properties.

function populateHeader(obj) {
  const header = document.querySelector("header");
  const myH1 = document.createElement("h1");
  myH1.textContent = obj.squadName;
  header.appendChild(myH1);

  const myPara = document.createElement("p");
  myPara.textContent = `Hometown: ${obj.homeTown} // Formed: ${obj.formed}`;
  header.appendChild(myPara);
}


async function populate() {
  const requestURL =
    "https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json";
  const request = new Request(requestURL);

  const response = await fetch(request);
  const superHeroes = await response.json();

  populateHeader(superHeroes);
  populateHeroes(superHeroes);
}

When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a 
JavaScript object.
const text = '["Ford", "BMW", "Audi", "Fiat"]';
const myArr = JSON.parse(text);

Date objects are not allowed in JSON. Functions are not allowed in JSON
If you need to include a date, write it as a string.
You can convert it back into a date object later:

const text = '{"name":"John", "age":"function () {return 30;}", "city":"New York"}';
const obj = JSON.parse(text);
obj.age = eval("(" + obj.age + ")");

document.getElementById("demo").innerHTML = obj.name + ", " + obj.age();
AVOID using functions in JSON; 


## OOP Principles s##

-- Single Responsibility : a class (or object or module… you get the point) should only have one responsibility.
Here’s a really common example. Most of our code has functions to update and write things to the DOM in addition
 to our application logic. It’s a REALLY good idea to separate your DOM stuff from the application logic.

Issues with this:
 function isGameOver() {
  // game over logic goes here!

  if (gameOver) {
    const gameOverDiv = document.createElement('div');
    gameOverDiv.classList.add('game-over');
    gameOverDiv.textContent = `${this.winner} won the game!`;
    document.body.appendChild(gameOverDiv);
  }
}

The first issue is that the function (and the module it’s in) should not directly be the one to manipulate the DOM. 
You should extract all the DOM manipulation into its own module and use it like so:

function isGameOver() {

  // game over logic goes here!

  if (gameOver){
    DOMStuff.gameOver(this.winner);
  }
}

The second issue remaining is that the isGameOver function should only be responsible for checking if the gameOver 
condition is met. Based on isGameOver return value, the function that handles the game loop should be responsible for 
deciding whether to call DOMStuff.gameOver(this.winner) or not.

Another way to think about the Single Responsibility Principle is that a given method/class/component should have a single 
reason to change. 

Obviously, all of our objects are intended to work together to form our final application. You should take care, however, 
to make sure that your individual objects can stand alone as much as possible. Tightly coupled objects are objects that rely 
so heavily on each other that removing or changing one will mean that you have to completely change another one - a real bummer.

Coupling between modules occurs when one module directly references another module. In other words, one module “knows” about another module.
One of the goals when creating highly scalable and maintainable JavaScript applications is that any module can be easily swapped out at 
any time for a different module. Reusability is also a major reason to minimize coupling. Another goal was that there should not be a single 
point of failure anywhere in the application. For example, a delivery time module breaking does not break the entire food delivery application from
running and completing the order. 

As an example, if we were writing a game and wanted to completely change how the User Interface worked, we should be able to do 
that without completely reworking the game logic. So we should be able to start off writing our game using primarily console.log()s 
and then add in a bunch of DOM functions later without touching the game logic.

------------------------------- SOLID Principles
1. Single responsibility
- The single responsibility principle says that a class or module should have only a single purpose. For example, if you have a wallet 
 class, that class should only implement wallet functionality. It’s fine to call other functionality, but it shouldn’t be written there.
- A class should have one and only one reason to change, meaning that a class should only have one job.

class Car {
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    start() {
        if (...) { // Logic to determine whether or not the car should start
            this.errorLog(`The car ${this.make} ${this.model} started.`);
            return true;
        }
        this.errorLog(`The car ${this.make} ${this.model} failed to start.`);
        return false;
    }

    errorLog(message) {
        console.log(message);
    }
}
 - This violates the single responsibility principle, because the logic for logging the information should not be a responsibility of the Car class.
THIS IS MUCH BETTER
- class ErrorLog {
    static log(message) {
        console.log(message);
    }
}

class Car {
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    start() {
        if (...) { // Logic to determine whether or not the car should start
            ErrorLog.log(`The car ${this.make} ${this.model} started.`);
            return true;
        }
        ErrorLog.log(`The car ${this.make} ${this.model} failed to start.`);
        return false;
    }
}

The Car class can be changed, moved around or even deleted without affecting the logger class. Likewise, if a change is required to the logger class, it
 only needs to be carried out in a single place.
 ------

2. Open-closed
- The open-closed principle says that code should be open for extension, but closed for modification. What this means is that if we want 
to add additional functionality, we should be able to do so simply by extending the original functionality, without the need to modify it.
BAD EXAMPLE
class Vehicle {
    constructor(fuelCapacity, fuelEfficiency) {
        this.fuelCapacity = fuelCapacity;
        this.fuelEfficiency = fuelEfficiency;
    }

    getRange() {
        let range = this.fuelCapacity * this.fuelEfficiency;

        if (this instanceof HybridVehicle) {
            range += this.electricRange;
        }
        return range;
    }
}

class HybridVehicle extends Vehicle {
    constructor(fuelCapacity, fuelEfficiency, electricRange) {
        super(fuelCapacity, fuelEfficiency);
        this.electricRange = electricRange;
    }
}

const standardVehicle = new Vehicle(10, 15);
const hybridVehicle = new HybridVehicle(10, 15, 50);

console.log(standardVehicle.getRange()); // Outputs '150'
console.log(hybridVehicle.getRange()); // Outputs '200'
- This violates the open-closed principle, because whilst adding our new HybridVehicle class we have had to go back and modify the 
code of our Vehicle class in order to make it work. Going forward, every time we add a new type of vehicle that might have different 
parameters for its range, we’ll have to continually modify that existing getRange function.

// MUCH BETTER
- class Vehicle {   
    constructor(fuelCapacity, fuelEfficiency) {
        this.fuelCapacity = fuelCapacity;
        this.fuelEfficiency = fuelEfficiency;
    }

    getRange() {
        return this.fuelCapacity * this.fuelEfficiency;
    }
}

class HybridVehicle extends Vehicle {
    constructor(fuelCapacity, fuelEfficiency, electricRange) {
        super(fuelCapacity, fuelEfficiency);
        this.electricRange = electricRange;
    }

    getRange() {
        return (this.fuelCapacity * this.fuelEfficiency) + this.electricRange;
    }
}

const standardVehicle = new Vehicle(10, 15);
const hybridVehicle = new HybridVehicle(10, 15, 50);

console.log(standardVehicle.getRange()); // Outputs '150'
console.log(hybridVehicle.getRange()); // Outputs '200'


3. Liskov substitution
- The Liskov substitution principle states that any class should be substitutable for its parent class without unexpected 
consequences. In others words, if the classes Cat and Dog extend the class Animal, then we would expect all of the functionality 
held within the Animal class to behave normally for a Cat and Dog object.
- BAD EXAMPLE
class Rectangle {
    constructor(height, width) {
        this.height = height;
        this.width = width;
    }

    setHeight(newHeight) {
        this.height = newHeight;
    }
}

class Square extends Rectangle {}

const rectangle = new Rectangle(4, 5);
const square = new Square(4, 4);

console.log(`Height: ${rectangle.height}, Width: ${rectangle.width}`); // Outputs 'Height: 4, Width: 5' (correct)
console.log(`Height: ${square.height}, Width: ${square.width}`); // Outputs 'Height: 4, Width: 4' (correct)

square.setHeight(5);
console.log(`Height: ${square.height}, Width: ${square.width}`); // Outputs 'Height: 5, Width: 4' (wrong) 
- This can be solved, using polymorphism, an if statement in the Rectangle class, or a variety of other methods. But the real 
cause of the issue is that Square is not a good child class of Rectangle, and that in reality, perhaps both shapes should inherit 
from a Shape class instead.

4. Interface segregation
- The interface segregation principle states that an entity should never be forced to implement an interface that contains elements 
which it will never use. For example, a Penguin should never be forced to implement a Bird interface if that Bird interface includes
functionality relating to flying, as penguins (spoiler alert) cannot fly.
- A client should never be forced to implement an interface that it doesn’t use or clients shouldn’t be forced to depend on methods they do not use.
- Example --> Composition over inheritance here
class Penguin {}

class Bird {}

const flyer = {
    fly() {
        console.log(`Flap flap, I'm flying!`);
    },
};

Object.assign(Bird.prototype, flyer);

const bird = new Bird();
bird.fly(); // Outputs 'Flap flap, I'm flying!'

const penguin = new Penguin();
penguin.fly(); // 'Error: penguin.fly is not a function'
- What this example does is to add the flying functionality (or interface) only to the class(es) that require it. This means that 
penguins won’t be given the ability to fly, whereas birds will. 
- JavaScript does not really utilize interfaces well. 

5. Dependency inversion
- The dependency inversion principle states that high level code should never depend on low level interfaces, and should instead 
use abstractions. It’s all about decoupling code.
- class PurchaseHandler {
    processPayment(paymentDetails, amount) {
        // Complicated, PayPal specific logic goes here
        const paymentSuccess = PayPal.requestPayment(paymentDetails, amount); // low level interface

        if (paymentSuccess) {
            // Do something
            return true;
        }

        // Do something
        return false;
    }
}
- The problem here is that if we change from PayPal to Square (another payment processor) in 6 months time, this code breaks. We 
need to go back and swap out our PayPal API calls for Square API calls. But in addition, what if the Square API wants different 
types of data? Or perhaps it wants us to “stage” a payment first, and then to process it once staging has completed?
That’s bad, and so we need to abstract the functionality out instead.
-class PurchaseHandler {
    processPayment(paymentDetails, amount) {
        const paymentSuccess = PaymentHandler.requestPayment( // create another clas to handle whatever system we use or switch to
            paymentDetails,
            amount
        );

        if (paymentSuccess) {
            // Do something
            return true;
        }

        // Do something
        return false;
    }
}

class PaymentHandler {
    requestPayment(paymentDetails, amount) {
        // Complicated, PayPal specific logic goes here
        return PayPal.requestPayment(paymentDetails, amount);
    }
}
- We’ll still need to make changes to the PaymentHandler interface if we change payment processor, but our higher level interface remains unchanged.

- Like many of the SOLID principles (and indeed OO principles in general), the objective is less about writing less code or writing 
it quicker, and more about writing better code.
